- read file and handle errors
- read from std::in




- implement sha256
- implement md5
	- fix reading from stdin




Allowed functions:
◦ open
◦ close
◦ read
◦ write
◦ malloc
◦ free
Must justify:
◦ strerror
◦ exit


- helper functions: libft style functions
- common functions: functions shared by all encoders
	- read from file
	- read from stdin
	- handle options
	- output to stdout (or stderr)
	- print instructions

- list of commands, store in list
- call on function pointer in list

- evaluate arguments:
- none: display usage
- first arg: command
	- md5
	- sha256
	- else : ft_ssl: Error: 'foobar' is an invalid command.
- if no options or files (if ac =< 2)
	- try to read form STDIN (and execute task)
		- if empty, open STDIN
- options:
	- -s: interprets next arg as string to hash
		- print in following format: 
		- MD5 ("stringname") = 098f6bcd4621d373cade4e832627b4f6
		- else print:
			md5: option requires an argument -- s
			usage: md5 [-pqrtx] [-s string] [files ...]
		- can be called on mulitple times
	- -q: quiet mode. Prints only the resulting hash (checksum)
		- MD5 (file) = 53d53ea94217b259c11a5a2d104ec58a
		-> 53d53ea94217b259c11a5a2d104ec58a
		- overrides -r options
	- -p: print input string from STDIN before hash
		- if none, open STDIN (how to quit, or validate?)
	- -r: reverse output
		- any output is reversed as follows:
			- MD5 ("test") = 098f6bcd4621d373cade4e832627b4f6
			-> 098f6bcd4621d373cade4e832627b4f6 "test"
			- MD5 (file) = 53d53ea94217b259c11a5a2d104ec58a
			-> 53d53ea94217b259c11a5a2d104ec58a file
		- Must come before any file is read. Or else:
			- md5: -r: No such file or directory
	- file name:
		- output: MD5 (filename) = 53d53ea94217b259c11a5a2d104ec58a
	- All options (and string for -s) must come before filenames, else will be
		interpreted as a filename.
		= once an arg is interpreted as a file, all following args are
			interpreted as files

How to generate list of tasks? linked list...
- encapsulate with linked lists? ... no need.
- or malloc a list of size ac - 1. Cannot be more than that.